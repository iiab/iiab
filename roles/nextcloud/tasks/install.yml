#TODO check if package names are the same in debian and raspbian
- name: Nextcloud - Install prerequisites
  package:
    name:
      - dnsutils
      - ffmpeg
      - php-bz2
      - php-cli
      - php-common
      - php-curl
      - php-fpm
      - php-gd
      - php-gmp
      - php-imagick
      - php-intl
      - php-json
      - php-mbstring
      - php-redis
      - php-smbclient
      - php-xml
      - php-zip
      - php-zip
#      - redis-server #temporarily can't get redis to work right now.
    state: latest

- name: Nextcloud - Download software to /opt/iiab/downloads
  get_url:
    url: "{{ nextcloud_dl_url }}/{{ nextcloud_src_file }}"
    dest: "{{ downloads_dir }}/{{ nextcloud_src_file }}"
    timeout: "{{ download_timeout }}"
  when: internet_available | bool

- name: Nextcloud - Check for /opt/iiab/downloads/{{ nextcloud_src_file }}
  stat:
    path: "{{ downloads_dir }}/{{ nextcloud_src_file }}"
  register: nextcloud_src

- name: Nextcloud - FAIL (force Ansible to exit) IF /opt/iiab/downloads/{{ nextcloud_src_file }} doesn't exist
  fail:
    msg: "{ downloads_dir }}/{{ nextcloud_src_file }} is REQUIRED in order to install."
  when: not nextcloud_src.stat.exists

- name: Nextcloud - Create install source directory {{ doc_root }}/{{ nextcloud_url }}
  file:
    path: "{{ doc_root }}/{{ nextcloud_url }}"
    state: directory

#TODO: Figure out who should be owner of this directory    
- name: Nextcloud - Extract source {{ doc_root }}/{{ nextcloud_url }}
  unarchive:
    src: "{{ downloads_dir }}/{{ nextcloud_src_file }}"
    dest: "{{ doc_root }}/{{ nextcloud_url }}"
    owner: "{{ apache_user }}"
    group: "{{ apache_user }}"
    extra_opts: [--strip-components=1]
    creates: "{{ downloads_dir }}/{{ nextcloud_url }}/index.php"

#FIXME: #TODO: Can't get redis to work.    
#- name: Nextcloud - Enable Redis server UNIX socket
#  lineinfile:
#    path: /etc/redis/redis.conf
#    regexp: '^# unixsocket '
#    state: present
#    line: unixsocket /var/run/redis/redis.sock
#    backrefs: yes
#
#- name: Nextcloud - Enable Redis server UNIX socket (permissions)
#  lineinfile:
#    path: /etc/redis/redis.conf
#    regexp: '^# unixsocketperm'
#    state: present
#    line: unixsocketperm 770
#    backrefs: yes

- name: Nextcloud - Uncomment lines from /etc/php/7.*/fpm/pool.d/www.conf
  lineinfile:
    dest: "/etc/php/{{ php_version }}/fpm/pool.d/www.conf"
    regexp: "^;({{ item }}.*)$"
    line: "\\1"
    backrefs: yes
    state: present
  with_items:
    - "env[HOSTNAME]"
    - "env[PATH]"
    - "env[TMP]"
    - "env[TMPDIR]"
    - "env[TEMP]"

- name: Nextcloud - Create MySQL database with name "{{ nextcloud_dbname }}"
  mysql_db:
    name: "{{ nextcloud_dbname }}"

- name: Nextcloud - Add username/password to the MySQL database (associated with trusted IP's like localhost)
  mysql_user:
    name: "{{ nextcloud_dbuser }}"
    host: "{{ item }}"
    password: "{{ nextcloud_dbpassword }}"
    priv: "{{ nextcloud_dbname }}.*:ALL,GRANT"
  with_items:
    - "{{ nextcloud_dbhost }}"
    - 127.0.0.1
    - ::1
    - localhost


#- name: Nextcloud - create data directory

- name: Nextcloud - copy nginx conf
  template:
    src: nextcloud.conf.j2
    dest: "{{ nginx_config_dir }}/nextcloud.conf"
    owner: root
    group: root
    mode: 0755

- name: Nextcloud - Restart nginx, php-fpm
  systemd:
    name: "{{ item }}"
    state: restarted
  with_items:
    - nginx
    - php-fpm

#FIXME: This comes at the very end
#TODO: Check if this is really required
- name: Add 'nextcloud_installed' variable values to {{ iiab_state_file }}
  lineinfile:
    dest: "{{ iiab_state_file }}"
    regexp: '^nextcloud_installed'
    line: 'nextcloud_installed: True'
    state: present

