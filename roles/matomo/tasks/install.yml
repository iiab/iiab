# The sections of code interacting with the Matomo website are modified from code found at https://git.coop/webarch/matomo/. This code is distributed under
# Version 3 of the GNU General Public License. We modified this code and applied it here in April 2022. The derived sections correspond to the tasks running
# from "HTTP Get Welcome" through "Finish Matomo Setup", lines 63 through 199.


- name: "WARNING: './runrole --reinstall matomo' CAN FAIL AS OF 2022-06-15, e.g. if /library/www/matomo already exists"
  meta: noop

# EXAMPLE OF ABOVE ERROR:

# TASK [matomo : HTTP Get Welcome] ***************************************************************************************************************************************
# fatal: [127.0.0.1]: FAILED! => {"cache_control": "private, no-cache, no-store", "changed": false, "connection": "close", "content_type": "text/html; charset=utf-8", "date": "Wed, 15 Jun 2022 05:07:41 GMT", "elapsed": 0, "expires": "Thu, 19 Nov 1981 08:52:00 GMT", "msg": "Status code was 500 and not [200]: HTTP Error 500: Internal Server Error", "pragma": "no-cache", "redirected": false, "server": "nginx/1.18.0 (Ubuntu)", "set_cookie": "MATOMO_SESSID=psak3aem27vrdrt8t2f016600f; path=/; HttpOnly; SameSite=Lax", "status": 500, "transfer_encoding": "chunked", "url": "http://box.lan/matomo/index.php?action=welcome", "x_matomo_request_id": "fbfd2"}


- name: "Set 'mysql_install: True' and 'mysql_enabled: True'"
  set_fact:
    mysql_install: True
    mysql_enabled: True

- name: MYSQL - run 'mysql' role (attempt to install & enable MySQL / MariaDB)
  include_role:
    name: mysql

- name: FAIL (STOP THE INSTALL) IF 'mysql_installed is undefined'
  fail:
    msg: "Matomo install cannot proceed, as MySQL / MariaDB is not installed."
  when: mysql_installed is undefined


- name: Record (initial) disk space used
  shell: df -B1 --output=used / | tail -1
  register: df1


# https://matomo.org/faq/on-premise/matomo-requirements/
- name: Install Matomo's recommended PHP extensions
  package:
    name:
      - php{{ php_version }}-curl
      - php{{ php_version }}-gd
      - php{{ php_version }}-cli
      - php{{ php_version }}-mysql
      - php{{ php_version }}-xml
      - php{{ php_version }}-mbstring

- name: "Run roles/www_options/tasks/php-settings.yml with 'nginx_high_php_limits: False' by default"
  include_tasks: roles/www_options/tasks/php-settings.yml
  when: php_settings_done is undefined

- name: Detect proot/Termux environment
  set_fact:
    is_proot: >-
      {{ 'proot-distro' in (ansible_kernel | default('') | lower)
         or (ansible_env.ANDROID_ROOT | default('') | length > 0) }}

- name: Start MariaDB (systemd; non-proot)
  #action: service name=mysql state=started
  systemd:
    name: "{{ mysql_service }}"
    state: started
  when: not is_proot

- block:
    - name: Ensure mysqld socket dir (proot)
      file:
        path: /run/mysqld
        state: directory
        owner: mysql
        group: mysql
        mode: "0755"

    - name: Start MariaDB with mariadbd-safe if not running (proot)
      shell: |
        pgrep -f '(^|/)(mariadbd|mysqld)( |$)' || \
        nohup mariadbd-safe \
          --user=mysql \
          --socket=/run/mysqld/mysqld.sock \
          --datadir=/var/lib/mysql \
          --pid-file=/run/mysqld/mysqld.pid \
          --bind-address=127.0.0.1 \
          --skip-name-resolve \
          >/tmp/mariadb.log 2>&1 &

    - name: Wait for MariaDB TCP (proot)
      wait_for:
        host: 127.0.0.1
        port: 3306
        timeout: 40
  when: is_proot

- name: Create MariaDB Database for Matomo
  community.mysql.mysql_db:
    name: "{{ matomo_db_name }}"
    #login_unix_socket: /var/run/mysqld/mysqld.sock
  when: not is_proot

- name: Add Admin User to MariaDB Database
  community.mysql.mysql_user:
    name: "{{ matomo_db_user }}"
    password: "{{ matomo_db_pass }}"
    update_password: on_create    # OR SHOULD './runrole --reinstall matomo' FORCE A COMPLETELY CLEAN INSTALL?
    priv: "{{ matomo_db_name }}.*:ALL"
    #login_unix_socket: /var/run/mysqld/mysqld.sock
  when: not is_proot

- name: Ensure DB and Admin users for localhost and 127.0.0.1 (proot, via socket CLI)
  shell: |
    mariadb -S /run/mysqld/mysqld.sock -uroot <<'SQL'
    CREATE DATABASE IF NOT EXISTS `{{ matomo_db_name }}`
      CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
    CREATE USER IF NOT EXISTS '{{ matomo_db_user }}'@'localhost' IDENTIFIED BY '{{ matomo_db_pass }}';
    CREATE USER IF NOT EXISTS '{{ matomo_db_user }}'@'127.0.0.1' IDENTIFIED BY '{{ matomo_db_pass }}';
    GRANT ALL PRIVILEGES ON `{{ matomo_db_name }}`.* TO '{{ matomo_db_user }}'@'localhost';
    GRANT ALL PRIVILEGES ON `{{ matomo_db_name }}`.* TO '{{ matomo_db_user }}'@'127.0.0.1';
    FLUSH PRIVILEGES;
    SQL
  args: { executable: /bin/bash }
  register: _db_users_proot
  changed_when: false
  when: is_proot

- name: Download and Extract Matomo (~3 min)
  unarchive:
    src: "{{ matomo_dl_url }}"    # e.g. https://builds.matomo.org/matomo.tar.gz
    dest: "{{ matomo_path }}"     # e.g. /library/www
    remote_src: yes

- name: Set Matomo Directory Permissions
  file:
    path: "{{ matomo_path }}/matomo"
    recurse: yes
    owner: "{{ apache_user }}"    # e.g. www-data
    group: "{{ apache_user }}"

- name: HTTP Get Welcome
  uri:
    url: "{{ matomo_full_url }}index.php?action=welcome"    # e.g. http://box.lan/matomo
    method: GET
    status_code: 200
  register: matomo_welcome

- debug:
    var: matomo_welcome

- name: Set a variable for the MATOMO_SESSID cookie
  set_fact:
    matomo_session_cookie: "MATOMO_SESSID={{ cookie.value }}"
  when: cookie.key == "MATOMO_SESSID"
  loop: "{{ matomo_welcome.cookies | dict2items }}"
  loop_control:
    loop_var: cookie

- name: FAIL if MATOMO_SESSID was not obtained (required for installation)
  fail:
    msg: "MATOMO_SESSID was not obtained; without a session, the installer falls back to defaults (localhost/socket)."
  when: matomo_session_cookie is not defined

- name: Get Matomo System Check
  uri:
    url: "{{ matomo_full_url }}index.php?action=systemCheck"
    method: GET
    headers:
      Cookie: "{{ matomo_session_cookie }}"
    return_content: true
    timeout: 120
    status_code: 200
  register: matomo_system_check

- debug:
    var: matomo_system_check

- name: TCP smoke-test (SELECT 1) using Admin over 127.0.0.1:3306 (proot)
  shell: |
    mysql --protocol=TCP -h127.0.0.1 -P3306 \
      -u "{{ matomo_db_user }}" -p"{{ matomo_db_pass }}" -e "SELECT 1;"
  register: _mysql_smoke
  changed_when: false
  failed_when: _mysql_smoke.rc != 0
  no_log: true
  when: is_proot

- name: Matomo Database Setup
  uri:
    url: "{{ matomo_full_url }}index.php?action=databaseSetup"
    method: POST
    headers:
      Cookie: "{{ matomo_session_cookie }}"
    body:
      # TCP fields only in proot:
      host: "{{ '127.0.0.1' if is_proot else omit }}"
      port: "{{ 3306 if is_proot else omit }}"
      unix_socket: "{{ '' if is_proot else omit }}"
      charset: "{{ 'utf8mb4' if is_proot else omit }}"
      type: "{{ 'InnoDB' if is_proot else omit }}"
      # Common fields:
      username: "{{ matomo_db_user }}"
      password: "{{ matomo_db_pass }}"
      dbname: "{{ matomo_db_name }}"
      tables_prefix: "matomo_"
      adapter: "PDO\\MYSQL"
    body_format: form-urlencoded
    status_code: [200, 302]
    follow_redirects: all
  #register: matomo_database_setup

- name: Matomo Table Creation
  uri:
    url: "{{ matomo_full_url }}index.php?action=tablesCreation&module=Installation"
    method: GET
    headers:
      Cookie: "{{ matomo_session_cookie }}"
    status_code: [200, 302]
    follow_redirects: all
    return_content: true
  register: matomo_table_creation
  failed_when: false
  retries: 3
  delay: 5
  until: matomo_table_creation.status in [200, 302]

- name: Dump web/db logs (proot) if tablesCreation did not succeed
  shell: |
    echo '=== /var/log/nginx/error.log ==='
    [ -f /var/log/nginx/error.log ] && tail -n 200 /var/log/nginx/error.log || echo '(no file)'
    echo '=== /tmp/php-fpm.log ==='
    [ -f /tmp/php-fpm.log ] && tail -n 200 /tmp/php-fpm.log || echo '(no file)'
    echo '=== /tmp/mariadb.log ==='
    [ -f /tmp/mariadb.log ] && tail -n 200 /tmp/mariadb.log || echo '(no file)'
  register: matomo_web_logs
  changed_when: false
  when: is_proot and (matomo_table_creation.status | default(-1)) not in [200, 302]

- debug:
    var: matomo_web_logs.stdout
  when: is_proot and (matomo_table_creation.status | default(-1)) not in [200, 302]

- name: Set a variable for the MATOMO_SESSID cookie
  set_fact:
    matomo_session_cookie: "MATOMO_SESSID={{ cookie.value }}"
  when:
    - matomo_table_creation.cookies is defined
    - matomo_table_creation.cookies | length > 0
    - cookie.key == "MATOMO_SESSID"
  loop: "{{ matomo_table_creation.cookies | dict2items }}"
  loop_control:
    loop_var: cookie

- debug:
    var: matomo_table_creation

- name: Matomo User Setup
  uri:
    url: "{{ matomo_full_url }}index.php?action=setupSuperUser&module=Installation"
    method: POST
    headers:
      Cookie: "{{ matomo_session_cookie }}"
    body:
      login: "{{ matomo_db_user }}"
      password: "{{ matomo_db_pass }}"
      password_bis: "{{ matomo_db_pass }}"
      email: "nobody@dev.null"
      subscribe_newsletter_piwikorg: 0
      subscribe_newsletter_professionalservices: 0
    body_format: form-urlencoded
    status_code: 302
  #register: matomo_setup_superuser

- name: Configure Matomo to track IIAB
  uri:
    url: "{{ matomo_full_url }}index.php?action=firstWebsiteSetup&module=Installation"
    method: POST
    headers:
      Cookie: "{{ matomo_session_cookie }}"
    body:
      siteName: "IIAB"
      url: "{{ matomo_host_url }}"
      ecommerce: 0
    body_format: form-urlencoded
    status_code: [200, 302]
  register: _result

- name: Fallback Configure Matomo to track IIAB
  uri:
    url: "{{ matomo_full_url }}index.php?action=firstWebsiteSetup&module=Installation"
    method: POST
    headers:
      Cookie: "{{ matomo_session_cookie }}"
    body:
      siteName: "IIAB"
      url: "{{ matomo_host_url }}"
      timezone: "Europe/London"
      ecommerce: 0
    body_format: form-urlencoded
    status_code: 302
  when: _result.status == 200

- name: Matomo Tracking Code
  uri:
    url: "{{ matomo_full_url }}index.php?action=trackingCode&module=Installation&site_idSite=1&site_name={{ matomo_host_url }}"
    method: GET
    headers:
      Cookie: "{{ matomo_session_cookie }}"
    return_content: true
    status_code: 200
  #register: matomo_tracking_code

- name: Finish Matomo Setup
  uri:
    url: "{{ matomo_full_url }}index.php?action=finished&module=Installation"
    method: POST
    headers:
      Cookie: "{{ matomo_session_cookie }}"
    body:
      do_not_track: 1
      anonymise_ip: 1
      submit: "Continue to Matomo"
    body_format: form-urlencoded
    status_code: 302

- name: Start Collecting Matomo Data
  cron:
    name: "MatomoDataIngestionOnReboot"
    special_time: reboot
    job: "{{ matomo_cronjob }}"
    user: root
    cron_file: "matomo_reboot"

- name: Run Daily Job Collecting Matomo Data
  cron:
    name: "DailyMatomoDataIngestion"
    minute: "0"
    hour: "0"
    job: "{{ matomo_cronjob }}"
    user: root
    cron_file: "matomo_daily"

- name: Set Permissions for token.php
  copy:
    content: ""
    dest: "{{ matomo_path }}/matomo/tmp/cache/token.php"
    group: "{{ apache_user }}"
    owner: "{{ apache_user }}"

- name: Set Permissions for tracker Directory
  file:
    path: "{{ matomo_path }}/matomo/tmp/cache/tracker"
    state: directory
    owner: "{{ apache_user }}"
    group: "{{ apache_user }}"

- name: Don't Check for Trusted Host
  ini_file:
    path: "{{ matomo_path }}/matomo/config/config.ini.php"
    section: General
    option: enable_trusted_host_check
    value: 0


# RECORD Matomo AS INSTALLED

- name: Record (final) disk space used
  shell: df -B1 --output=used / | tail -1
  register: df2

- name: Add 'matomo_disk_usage = {{ df2.stdout | int - df1.stdout | int }}' to {{ iiab_ini_file }}
  ini_file:
    path: "{{ iiab_ini_file }}"    # /etc/iiab/iiab.ini
    section: matomo
    option: matomo_disk_usage
    value: "{{ df2.stdout | int - df1.stdout | int }}"

- name: "Set 'matomo_installed: True'"
  set_fact:
    matomo_installed: True

- name: "Add 'matomo_installed: True' to {{ iiab_state_file }}"
  lineinfile:
    path: "{{ iiab_state_file }}"    # /etc/iiab/iiab_state.yml
    regexp: '^matomo_installed'
    line: 'matomo_installed: True'
