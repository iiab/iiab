- name: Assert that "remoteit_install is sameas true" (boolean not string etc)
  assert:
    that: remoteit_install is sameas true
    fail_msg: "PLEASE SET 'remoteit_install: True' e.g. IN: /etc/iiab/local_vars.yml"
    quiet: yes

- name: Assert that "remoteit_enabled | type_debug == 'bool'" (boolean not string etc)
  assert:
    that: remoteit_enabled | type_debug == 'bool'
    fail_msg: "PLEASE GIVE VARIABLE 'remoteit_enabled' A PROPER (UNQUOTED) ANSIBLE BOOLEAN VALUE e.g. IN: /etc/iiab/local_vars.yml"
    quiet: yes


- name: Install remoteit if 'remoteit_installed' not defined, e.g. in {{ iiab_state_file }}    # /etc/iiab/iiab_state.yml
  include_tasks: install.yml
  when: remoteit_installed is undefined


- include_tasks: enable-or-disable.yml

# - name: Extract claim code from /etc/remoteit/config.json if it exists
#   shell: grep claim /etc/remoteit/config.json | rev | cut -d\" -f2 | rev
#   register: remoteit_claim_code

- name: Add 'remoteit' variable values to {{ iiab_ini_file }}
  ini_file:
    path: "{{ iiab_ini_file }}"    # /etc/iiab/iiab.ini
    section: remoteit
    option: "{{ item.option }}"
    value: "{{ item.value | string }}"
  with_items:
    - option: name
      value: remote.it
    - option: description
      value: '"https://remote.it can help you remotely maintain an IIAB.  Some benefits include: crossing multiple NATs/firewalls using a single TCP port, without requiring router port forwarding, and reducing your network''s vulnerability."'
    - option: remoteit_install
      value: "{{ remoteit_install }}"
    - option: remoteit_enabled
      value: "{{ remoteit_enabled }}"
    # - option: remoteit_claim_code
    #   value: "{{ remoteit_claim_code.stdout }}"
