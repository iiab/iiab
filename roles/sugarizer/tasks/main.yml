- name: Download latest stable Sugarizer from location we control
  get_url:
    url: "{{ iiab_download_url }}/{{ sugarizer_version }}.tar.gz"
    dest: "{{ downloads_dir }}/{{ sugarizer_version }}.tar.gz"
    timeout: "{{ download_timeout }}"
  when: internet_available

- name: Untar to /library/www/html/{{ sugarizer_version }}
  unarchive:
    src: "{{ downloads_dir }}/{{ sugarizer_version }}.tar.gz"
    dest: "{{ sugarizer_location }}"
    creates: "{{ sugarizer_location }}/{{ sugarizer_version }}/index.html"
#  command: tar xzf {{ downloads_dir }}/{{ sugarizer_version }}.tar.gz -C {{ sugarizer_location }}
#           creates="{{ sugarizer_location }}/{{ sugarizer_version }}/index.html"

- name: Create symbolic link /library/www/html/sugarizer
  file:
    src: "{{ sugarizer_location }}/{{ sugarizer_version }}"
    dest: "{{ sugarizer_location }}/sugarizer"
    state: link

- name: Set up Node.js 6.x apt sources (debuntu)
  shell: curl -sL https://deb.nodesource.com/setup_6.x | bash -
  when: internet_available and is_debuntu and not is_ubuntu_18

- name: Install latest Node.js which includes /usr/bin/npm (debuntu)
  package:
    name: nodejs
    state: latest
# package: name=nodejs=6.*
#          state=present
  when: internet_available and is_debuntu and not is_ubuntu_18

- name: Install npm (OS's other than debuntu)
  package:
    name: "{{ item }}"
    state: present
  when: internet_available and not is_debuntu
  with_items:
    - nodejs
    - npm

- name: Install npm (ubuntu-18)
  package:
    name: "{{ item }}"
    state: latest
  when: internet_available and is_ubuntu_18
  with_items:
    - npm
    - nodejs

# attempting to reinstall npm is broken on Raspbian 9
- name: Check for Sugarizer already installed
  stat:
    path: "{{ sugarizer_location }}/sugarizer/server/node_modules"
  register: npm

- name: Set a flag to abort second attempt to install
  set_fact:
    npm_exists: True
  when: npm.stat.exists is defined and npm.stat.exists

- name: Create systemd files and copy our ini file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - { src: 'sugarizer.service.j2' , dest: '/etc/systemd/system/sugarizer.service'}
    - { src: 'sugarizer.ini' , dest: '{{ sugarizer_location }}/sugarizer/server' }
#     - { src: 'sugarizer.conf' , dest: '/etc/apache2/sites-available' }

#- name: Create the symlink enabling the rewrite
#  file: src=/etc/apache2/sites-available/sugarizer.conf
#        dest=/etc/apache2/sites-enabled/sugarizer.conf
#        state=link

- name: Create the express framework for Node.js (OS's other than Fedora 18)
  shell: npm install
  args:
    chdir: "{{ sugarizer_location }}/sugarizer/server"
    creates: "{{ sugarizer_location }}/sugarizer/server/node_modules"
  when: not is_F18 and not npm_exists

- name: Create the express framework for Node.js (Fedora 18)
  shell: npm install
  args:
    chdir: "{{ sugarizer_location }}/sugarizer/server"
  when: is_F18 and not npm_exists

- name: Enable services (all OS's)
  service:
    name: "{{ item.name }}"
    enabled: yes
    state: restarted
  with_items:
    - { name: sugarizer }
  when: sugarizer_enabled

- name: Disable services (all OS's)
  service:
    name: "{{ item.name }}"
    enabled: no
    state: stopped
  with_items:
    - { name: sugarizer }
  when: not sugarizer_enabled

- name: Add 'sugarizer' to list of services at /etc/iiab/iiab.ini
  ini_file:
    dest: "{{ service_filelist }}"
    section: sugarizer
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - option: name
      value: Sugarizer
    - option: description
      value: '"The Sugar Learning Platform began with the famous One Laptop Per Child project, written in Python. Sugarizer is the new HTML/JavaScript implementation of Sugar, usable in most all browsers."'
    - option: enabled
      value: "{{ sugarizer_enabled }}"
